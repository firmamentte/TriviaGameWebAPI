/*
using MyGeneration/Template/NHibernate (c) by Firmament
*/
using System;
using System.Collections.Generic;
using System.Linq;
using TriviaGameWebAPI.Core;

namespace TriviaGameWebAPI.Data
{
    /// <summary>
     /// Exposes access to NHibernate DAO classes.  Motivation for this DAO
    /// framework can be found at on the web
    /// AutoGenerated
    /// </summary>

 public static partial class TriviaGameWebAPIDAL 
     {

	public static Answer RefreshAnswer(Answer inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Refresh(inParam);
			return inParam;
		}
	public static void DeleteAnswer(Answer inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Delete(inParam);
		}
	public static List<Answer> GetAllAnswer()
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Answer>().
			List<Answer>().
			ToList();
		}
	public static Answer GetAnswerById(Guid Id)
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Answer>().
			Where(entity => entity.AnswerId == Id).
			SingleOrDefault();
		}
	public static Answer SaveAnswer(Answer inParam)
		{
			NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(inParam);
			return inParam;
		}
	public static Answer SaveTransientAnswer(Answer inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Merge(inParam);
			return inParam;
		}
	public static IList<Answer> SaveAnswer(IList<Answer> inParam)
		{
			foreach (Answer aAnswer in inParam)
			{
				NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(aAnswer);
			}
			return inParam;
		}
	public static Choice RefreshChoice(Choice inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Refresh(inParam);
			return inParam;
		}
	public static void DeleteChoice(Choice inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Delete(inParam);
		}
	public static List<Choice> GetAllChoice()
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Choice>().
			List<Choice>().
			ToList();
		}
	public static Choice GetChoiceById(Guid Id)
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Choice>().
			Where(entity => entity.ChoiceId == Id).
			SingleOrDefault();
		}
	public static Choice SaveChoice(Choice inParam)
		{
			NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(inParam);
			return inParam;
		}
	public static Choice SaveTransientChoice(Choice inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Merge(inParam);
			return inParam;
		}
	public static IList<Choice> SaveChoice(IList<Choice> inParam)
		{
			foreach (Choice aChoice in inParam)
			{
				NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(aChoice);
			}
			return inParam;
		}
	public static Game RefreshGame(Game inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Refresh(inParam);
			return inParam;
		}
	public static void DeleteGame(Game inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Delete(inParam);
		}
	public static List<Game> GetAllGame()
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Game>().
			List<Game>().
			ToList();
		}
	public static Game GetGameById(Guid Id)
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Game>().
			Where(entity => entity.GameId == Id).
			SingleOrDefault();
		}
	public static Game SaveGame(Game inParam)
		{
			NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(inParam);
			return inParam;
		}
	public static Game SaveTransientGame(Game inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Merge(inParam);
			return inParam;
		}
	public static IList<Game> SaveGame(IList<Game> inParam)
		{
			foreach (Game aGame in inParam)
			{
				NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(aGame);
			}
			return inParam;
		}
	public static Genre RefreshGenre(Genre inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Refresh(inParam);
			return inParam;
		}
	public static void DeleteGenre(Genre inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Delete(inParam);
		}
	public static List<Genre> GetAllGenre()
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Genre>().
			List<Genre>().
			ToList();
		}
	public static Genre GetGenreById(Guid Id)
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Genre>().
			Where(entity => entity.GenreId == Id).
			SingleOrDefault();
		}
	public static Genre SaveGenre(Genre inParam)
		{
			NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(inParam);
			return inParam;
		}
	public static Genre SaveTransientGenre(Genre inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Merge(inParam);
			return inParam;
		}
	public static IList<Genre> SaveGenre(IList<Genre> inParam)
		{
			foreach (Genre aGenre in inParam)
			{
				NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(aGenre);
			}
			return inParam;
		}
	public static Question RefreshQuestion(Question inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Refresh(inParam);
			return inParam;
		}
	public static void DeleteQuestion(Question inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Delete(inParam);
		}
	public static List<Question> GetAllQuestion()
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Question>().
			List<Question>().
			ToList();
		}
	public static Question GetQuestionById(Guid Id)
		{
			return
			NHibernateSessionManager.Instance.GetSession().
			QueryOver<Question>().
			Where(entity => entity.QuestionId == Id).
			SingleOrDefault();
		}
	public static Question SaveQuestion(Question inParam)
		{
			NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(inParam);
			return inParam;
		}
	public static Question SaveTransientQuestion(Question inParam)
		{
			NHibernateSessionManager.Instance.GetSession().Merge(inParam);
			return inParam;
		}
	public static IList<Question> SaveQuestion(IList<Question> inParam)
		{
			foreach (Question aQuestion in inParam)
			{
				NHibernateSessionManager.Instance.GetSession().SaveOrUpdate(aQuestion);
			}
			return inParam;
		}


}
}
